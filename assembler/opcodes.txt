VM documentation for FluffyVM

Registers: 65,280 general purpose
           2 special purpose
           254 reserved
	   ----------------------
	   65,536 registers total

Minimum stack sizes: 512 general purpose stack
                     256 calls

Register	Mode	Usage
0xFFFF		r	Always nil (silently fail any write)
0xFFFE		rw	Nillable environment table here (behave like _ENV variable from Lua)
			Note:
			 * Written once at start of the function 
0xFFFD		none	0xFF00 - 0xFFFD is reserved
			Note:
			 * Attempt to access will cause
			   illegal access error
...
0xFEFF		rw	0x0000 - 0xFEFF is general purpose
...
0x0000		rw

Instruction format

Single instruction is 64-bit or 8 bytes long
Instruction is little endian

Byte offset	Field
0		Opcode
1		Conditional flag
2-3		Operand A
4-5		Operand B
6-7		Operand C

Note:
 * Byte offset counted from MSB to LSB
 * Currently the reference assembler
   does not make use of the the conditional
   flag field

Opcode	Mnemonic		Description
0x00	nop()			No operation
0x01	mov(A, B)		R(A) = R(B)
0x02	table_get(A, B, C)	R(A) = R(B)[R(C)]
				Note:
				 * R(C) must be non nil
0x03	table_set(A, B, C)	R(A)[R(B)] = R(C)
				Note:
				 * R(B) must be non nil
0x04	call(A, B, C, D)	S(S.top+1)..S(S.top + B + 1) = R(A)(S(C)..S(C+D-2))
				Note: 
				 * If B == 0 then no result is returned'
				 * If B == 1 then all argument returned
				 * If D == 0 then no parameter is passed 
				 * If D == 1 then pass all argument up to S.top
				 * A easier way to interpret B field is B is number of return values
0x05	stack_push(A)		S(S.top) = R(A); S.top++
0x06	stack_pop(A)		S.top--; R(A) = S(S.top)
0x07	get_constant(A, B)	R(A) = ConstPool[B]
0x08	ret(A, B)		Return R(A)..R(A+B-1)
				Note:
				 * If B == 0 then return nothing
				 * Pushes values to stack then
				   return
0x09	extra()			Throw undefined instruction error 
				(the A, B, C operand are used by some 
				instruction)
0x0A	stack_get_top(A)	R(A) = S.top
0x0B	load_prototype(A, B)	R(A) = Proto[B]

// Maths
0x0C	add(A, B, C)		R(A) = R(B) + R(C)
0x0D	sub(A, B, C)		R(A) = R(B) - R(C)
0x0E  mul(A, B, C)    R(A) = R(B) * R(C)
0x0F  div(A, B, C)    R(A) = R(B) / R(C) 
0x10  mod(A, B, C)    R(A) = R(B) % R(C)
0x11  pow(A, B, C)    R(A) = R(B) ^ R(C)

// Branches
// Use cond flags to do
// a conditional jump
0x12  jmp_forward(A)  PC += A
0x13  jmp_backward(A) PC -= A


Note:
 * All operands is 16 bit unsigned integers unless noted
 * All ranges is inclusive unless noted
 * R(n) represent register access at 'n'
 * S(n) represent stack access at 'n'
 * Constant pool is indexed from 0
 * S.top represent pointer to a valid entry in stack
 * ^ is 'to the power' operator

When calling:
  The stack of the callee function is filled 
  so that S(0) will have first argument, S(1) second
  argument, and so on





